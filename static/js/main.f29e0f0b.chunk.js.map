{"version":3,"sources":["error_pages/Error400.jsx","error_pages/Error401.jsx","error_pages/Error403.jsx","error_pages/Error404.jsx","error_pages/Error500.jsx","dashboard/NavHeader.jsx","dashboard/NavFooter.jsx","dashboard/HomePage.jsx","dashboard/StatePage.jsx","dashboard/AboutPage.jsx","dashboard/PageRouter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Error400","React","Error401","Error403","Error404","Error500","NavHeader","navBarItems","value","to","useExact","LinkComponent","withRouter","NavLink","Header","imageURL","href","alt","navItems","target","outline","RootComponent","color","Nav","itemsObjects","collapse","NavFooter","id","Footer","className","note","copyright","rel","nav","Col","auto","Item","size","domain","moment","locale","dayTwo","subtract","format","toLocaleString","dayThree","dayFour","dayFive","daySix","daySeven","HomePage","state","newPos","newNeg","newDeaths","totalDeaths","hospitalized","recovered","newHosp","currICU","onVentilator","trendTwo","trendThree","trendFour","trendFive","trendSix","trendSeven","yestPos","yestNeg","yestDeaths","yestHosp","yestTotalDeaths","loadingCount","pendConf","yestConf","data","axios","get","then","res","setState","positiveIncrease","negativeIncrease","deathIncrease","death","hospitalizedCurrently","hospitalizedIncrease","inIcuCurrently","onVentilatorCurrently","pending","nextProps","nextState","this","getData","percentage","today","yesterday","temp","Math","round","Content","title","Row","cards","width","sm","lg","layout","movement","total","label","header","content","progressWidth","progressColor","Title","style","height","columns","type","groups","colors","cases","names","axis","y","padding","bottom","show","tick","outer","x","left","right","legend","position","tooltip","point","striped","responsive","ColHeader","Body","md","Link","notInICU","inICU","top","nonICU","ventilator","Small","states","stateData","StatePage","lastUpdated","dataGrade","newTests","yestTests","selectedCounty","updated","onSelectHandler","eventKey","event","innerHTML","console","log","population","dataQualityGrade","totalTestResultsIncrease","lastUpdateEt","catch","error","alert","isDismissible","H4","DropdownButton","map","index","Dropdown","toString","onSelect","as","AboutPage","Accordion","defaultActiveKey","Card","Toggle","Collapse","PageRouter","basename","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f29e0f0b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Error400Page } from 'tabler-react';\n\nclass Error400 extends React.Component {\n    render() {\n        return(\n           <Error400Page /> \n        );\n    }\n}\n\nexport default Error400;\n\n","import * as React from 'react';\nimport { Error401Page } from 'tabler-react';\n\nclass Error401 extends React.Component {\n    render() {\n        return(\n           <Error401Page /> \n        );\n    }\n}\n\nexport default Error401;\n\n","import * as React from 'react';\nimport { Error403Page } from 'tabler-react';\n\nclass Error403 extends React.Component {\n    render() {\n        return(\n           <Error403Page /> \n        );\n    }\n}\n\nexport default Error403;\n\n","import * as React from 'react';\nimport { Error404Page } from 'tabler-react';\n\nclass Error404 extends React.Component {\n    render() {\n        return(\n           <Error404Page /> \n        );\n    }\n}\n\nexport default Error404;\n\n","import * as React from 'react';\nimport { Error500Page } from 'tabler-react';\n\nclass Error500 extends React.Component {\n    render() {\n        return(\n           <Error500Page /> \n        );\n    }\n}\n\nexport default Error500;\n\n","import * as React from 'react';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { Site, Button } from 'tabler-react';\n\n\nclass NavHeader extends React.Component {\n    \n    render() {\n\n        // contains basic info for navbar items\n        const navBarItems = [\n            {\n                value: \"National\",\n                to: \"/\",\n                useExact: true,\n                LinkComponent: withRouter(NavLink)\n            },\n            {\n                value: \"State\",\n                to: \"/state\",\n                useExact: true,\n                LinkComponent: withRouter(NavLink)\n            },\n            {\n                value: \"About\",\n                to: \"/about\",\n                useExact: true,\n                LinkComponent: withRouter(NavLink)\n            }\n        ]\n\n        return (\n            <>\n                <Site.Header\n                    imageURL=\"https://i.imgur.com/T1s5N9i.png\"\n                    href=\"/\"\n                    alt=\"COVID Stats\"\n                    navItems={\n                        <Button\n                            href=\"https://github.com/max-richter/covidstats\"\n                            target=\"_blank\"\n                            outline\n                            RootComponent=\"a\"\n                            color=\"info\"\n                        >\n                            Source Code\n                        </Button>\n                    }\n                />\n                <Site.Nav\n                    itemsObjects={navBarItems}\n                    collapse={false}\n                />\n            </>\n        );\n    }\n}\n\nexport default NavHeader;\n","import * as React from 'react';\nimport { Site, Grid, List, Button } from 'tabler-react';\n\n\nclass NavFooter extends React.Component {\n    render() {\n        return (\n            <footer id=\"footer\">\n                <Site.Footer\n                    className=\"customFooter\"\n                    note=\"A website containing national and statewide COVID-19 statistics.\"\n                    copyright={\n                        <>\n                            Copyright © 2020 -\n                            <a href=\"https://github.com/max-richter\"\n                                target=\"_blank\"\n                                rel=\"noreferrer\"> Max\n                        </a>\n                        </>\n                    }\n                    nav={\n                        <>\n                            <Grid.Col auto={true}>\n                                <List className=\"list-inline list-inline-dots mb-0\">\n                                    <List.Item className=\"list-inline-item\">\n                                        <a href=\"/covidstats/about\">About</a>\n                                    </List.Item>\n                                </List>\n                            </Grid.Col>\n                            <Grid.Col auto={true}>\n                                <Button\n                                    href=\"https://github.com/max-richter/covidstats\"\n                                    target=\"_blank\"\n                                    outline\n                                    size=\"sm\"\n                                    color=\"info\"\n                                    RootComponent=\"a\"\n                                >\n                                    Check out the Project!\n                            </Button>\n                            </Grid.Col>\n                        </>\n                    }\n                />\n            </footer>\n\n        );\n    }\n}\n\nexport default NavFooter;","import * as React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport {\n    Page,\n    Grid,\n    StatsCard,\n    Card,\n    colors,\n    Table,\n    ProgressCard,\n    Alert,\n    Text\n} from 'tabler-react';\n\nimport NavHeader from './NavHeader';\nimport NavFooter from './NavFooter';\nimport C3Chart from 'react-c3js';\nimport '/Users/max/Desktop/covidstats/covidstats/src/c3.css';\n\n// TODO: research more into fixing imageURL (works for now but with link)\nconst domain = 'https://api.covidtracking.com';\nconst current = '/v1/us/current.json';\n\n// sets time language to english\nmoment().locale('en');\n\n// get historic values\nlet dayTwo = moment().subtract(2, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayThree = moment().subtract(3, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayFour = moment().subtract(4, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayFive = moment().subtract(5, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet daySix = moment().subtract(6, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet daySeven = moment().subtract(7, 'days').format(\"YYYYMMDD\").toLocaleString();\n\n// TODO remove recovered data point, deprecated\n\nclass HomePage extends React.Component {\n\n    state = {\n        newPos: 0,\n        newNeg: 0,\n        newDeaths: 0,\n        totalDeaths: 0,\n        hospitalized: 0,\n        recovered: 0,\n        newHosp: 0,\n        currICU: 0,\n        onVentilator: 0,\n        trendTwo: 0,\n        trendThree: 0,\n        trendFour: 0,\n        trendFive: 0,\n        trendSix: 0,\n        trendSeven: 0,\n        yestPos: 0,\n        yestNeg: 0,\n        yestDeaths: 0,\n        yestHosp: 0,\n        yestTotalDeaths: 0,\n        loadingCount: 0,\n        pendConf: 0,\n        yestConf: 0\n    }\n\n    getData() {\n        let data;\n        // get current US values\n        axios.get(domain + current).then(res => {\n            data = res.data;\n            this.setState({\n                newPos: data[0].positiveIncrease,\n                newNeg: data[0].negativeIncrease,\n                newDeaths: data[0].deathIncrease,\n                totalDeaths: data[0].death,\n                hospitalized: data[0].hospitalizedCurrently,\n                newHosp: data[0].hospitalizedIncrease,\n                currICU: data[0].inIcuCurrently,\n                onVentilator: data[0].onVentilatorCurrently,\n                pendConf: data[0].pending\n            })\n        });\n\n        // last api calls\n        axios.get(domain + '/v1/us/' + dayTwo + '.json').then(res => {\n            this.setState({\n                trendTwo: res.data.positiveIncrease,\n                yestPos: res.data.positiveIncrease,\n                yestNeg: res.data.negativeIncrease,\n                yestDeaths: res.data.deathIncrease,\n                yestHosp: res.data.hospitalizedIncrease,\n                yestTotalDeaths: res.data.death,\n                yestConf: res.data.pending\n            });\n        });\n        axios.get(domain + '/v1/us/' + dayThree + '.json').then(res => {\n            this.setState({ trendThree: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/us/' + dayFour + '.json').then(res => {\n            this.setState({ trendFour: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/us/' + dayFive + '.json').then(res => {\n            this.setState({ trendFive: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/us/' + daySix + '.json').then(res => {\n            this.setState({ trendSix: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/us/' + daySeven + '.json').then(res => {\n            this.setState({ trendSeven: res.data.positiveIncrease });\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.loadingCount !== nextState.value;\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n\n    render() {\n\n        /**\n         * Calculates the percentage increase/decrease for stat cards\n         * @param {*} today \n         * @param {*} yesterday \n         */\n        function percentage(today, yesterday) {\n            let temp = Math.round((today / yesterday) * 100);\n            if (temp > 100) {\n                temp = 100 - temp;\n            } else {\n                temp = temp - 100;\n            }\n            return temp;\n        }\n\n        return (\n            <div>\n                <NavHeader />\n                <Page.Content title=\"National Data\">\n                    <Grid.Row cards={true}>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newPos, this.state.yestPos)}\n                                total={this.state.newPos.toLocaleString()}\n                                label=\"New Positive Cases\" />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newNeg, this.state.yestNeg)}\n                                total={this.state.newNeg.toLocaleString()}\n                                label=\"New Negative Cases\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newDeaths, this.state.yestDeaths)}\n                                total={this.state.newDeaths.toLocaleString()}\n                                label=\"New Daily Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.totalDeaths, this.state.yestTotalDeaths)}\n                                total={this.state.totalDeaths.toLocaleString()}\n                                label=\"Total Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newHosp, this.state.yestHosp)}\n                                total={this.state.hospitalized.toLocaleString()}\n                                label=\"Hospitalized\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.pendConf, this.state.yestConf)}\n                                total={this.state.pendConf.toLocaleString()}\n                                label=\"Pending Pos. Cases\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Newly Hospitalized\"\n                                content={this.state.newHosp.toLocaleString()}\n                                progressWidth={100}\n                                progressColor=\"blue\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Currently in ICU\"\n                                content={this.state.currICU.toLocaleString()}\n                                progressColor=\"purple\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Patients on Ventilators\"\n                                content={this.state.onVentilator.toLocaleString()}\n                                progressColor=\"red\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n\n                        <Grid.Col lg={6}>\n                            <Card>\n                                <Card.Header>\n                                    <Card.Title>Case Trend</Card.Title>\n                                </Card.Header>\n                                <C3Chart\n                                    style={{ height: \"10rem\" }}\n                                    data={{\n                                        columns: [\n                                            [\n                                                \"cases\",\n                                                this.state.trendSeven,\n                                                this.state.trendSix,\n                                                this.state.trendFive,\n                                                this.state.trendFour,\n                                                this.state.trendThree,\n                                                this.state.trendTwo,\n                                                this.state.newPos,\n                                            ],\n                                        ],\n                                        type: \"area\",\n                                        groups: [[\"cases\"]],\n                                        colors: {\n                                            cases: colors[\"blue-dark\"],\n                                        },\n                                        names: {\n                                            cases: \"Cases\",\n                                        },\n                                    }}\n                                    axis={{\n                                        y: {\n                                            padding: {\n                                                bottom: 0,\n                                            },\n                                            show: false,\n                                            tick: {\n                                                outer: false,\n                                            },\n                                        },\n                                        x: {\n                                            padding: {\n                                                left: 0,\n                                                right: 0,\n                                            },\n                                            show: false,\n                                        },\n                                    }}\n                                    legend={{\n                                        show: true,\n                                        position: \"bottom\",\n                                        padding: 0,\n                                    }}\n                                    tooltip={{\n                                        format: {\n                                            title: function (x) {\n                                                return \"\";\n                                            },\n                                        },\n                                    }}\n                                    padding={{\n                                        bottom: 0,\n                                        left: 0,\n                                        right: 0,\n                                    }}\n                                    point={{\n                                        show: true,\n                                    }}\n                                />\n                                <Table\n                                    cards={true}\n                                    striped={true}\n                                    responsive={true}\n                                    className=\"table-vcenter\"\n                                >\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.ColHeader>Date</Table.ColHeader>\n                                            <Table.ColHeader>New Cases</Table.ColHeader>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.newPos.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(1, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendTwo.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(2, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendThree.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(3, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFour.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(4, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFive.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(5, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSix.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(6, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSeven.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Card>\n                        </Grid.Col>\n\n                        <Grid.Col md={6}>\n                            <Alert type=\"info\">\n                                <Alert.Link\n                                    href=\"https://github.com/max-richter\"\n                                    target=\"_blank\"\n                                >\n                                    Check out the project's\n                                </Alert.Link>{\" \"}\n                                documentation on GitHub.\n                            </Alert>\n                            <Grid.Row>\n                                <Grid.Col sm={12}>\n                                    <Card>\n                                        <Card.Header>\n                                            <Card.Title>ICU Status (% of admitted patients)</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <C3Chart\n                                                style={{ height: \"16rem\" }}\n                                                data={{\n                                                    columns: [\n                                                        [\"notInICU\", percentage(this.state.hospitalized, this.state.currICU)],\n                                                        [\"inICU\", percentage(this.state.currICU, this.state.hospitalized)],\n                                                    ],\n                                                    type: \"donut\",\n                                                    colors: {\n                                                        notInICU: colors[\"red\"],\n                                                        inICU: colors[\"red-light\"]\n                                                    },\n                                                    names: {\n                                                        notInICU: \"non-ICU\",\n                                                        inICU: \"ICU\"\n                                                    },\n                                                }}\n                                                padding={{\n                                                    bottom: 0,\n                                                    top: 0\n                                                }}\n                                            />\n                                        </Card.Body>\n                                    </Card>\n                                </Grid.Col>\n                                <Grid.Col sm={12}>\n                                    <Card>\n                                        <Card.Header>\n                                            <Card.Title>Ventilator Status (% of admitted patients)</Card.Title>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <C3Chart\n                                                style={{ height: \"16rem\" }}\n                                                data={{\n                                                    columns: [\n                                                        [\"nonICU\", percentage(this.state.hospitalized, this.state.onVentilator)],\n                                                        [\"ventilator\", percentage(this.state.onVentilator, this.state.hospitalized)],\n                                                    ],\n                                                    type: \"pie\",\n                                                    colors: {\n                                                        nonICU: colors[\"blue-dark\"],\n                                                        ventilator: colors[\"blue-light\"],\n                                                    },\n                                                    names: {\n                                                        nonICU: \"non-Ventilator\",\n                                                        ventilator: \"Ventilator\"\n                                                    }\n                                                }}\n                                            />\n                                        </Card.Body>\n                                        <Card.Footer>\n                                            <Text.Small>\n                                                Note: Every state has a different way of reporting this statistic.\n                                                Use this graph as an approximate visual representation of the percentage of\n                                                patients who are admitted to the hospital and currently on a ventilator.\n                                            </Text.Small>\n                                        </Card.Footer>\n                                    </Card>\n                                </Grid.Col>\n                            </Grid.Row>\n                        </Grid.Col>\n                    </Grid.Row>\n                </Page.Content>\n                <NavFooter />\n            </div>\n\n        );\n    }\n}\n\nexport default HomePage;","import * as React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport NavHeader from './NavHeader';\nimport NavFooter from './NavFooter';\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport C3Chart from 'react-c3js';\nimport stateData from './states.json';\nimport {\n    Page,\n    Grid,\n    StatsCard,\n    Card,\n    colors,\n    Table,\n    ProgressCard,\n    Alert,\n    Header\n} from 'tabler-react';\nimport '/Users/max/Desktop/covidstats/covidstats/src/c3.css';\n\nconst domain = 'https://api.covidtracking.com';\nconst states = stateData;\n\n// sets time language to english\nmoment().locale('en');\n\n// get historic values\nlet dayTwo = moment().subtract(3, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayThree = moment().subtract(4, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayFour = moment().subtract(5, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet dayFive = moment().subtract(6, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet daySix = moment().subtract(7, 'days').format(\"YYYYMMDD\").toLocaleString();\nlet daySeven = moment().subtract(8, 'days').format(\"YYYYMMDD\").toLocaleString();\n\n\nclass StatePage extends React.Component {\n\n    state = {\n        newPos: 0,\n        newNeg: 0,\n        newDeaths: 0,\n        totalDeaths: 0,\n        hospitalized: 0,\n        newHosp: 0,\n        lastUpdated: '',\n        dataGrade: '',\n        trendTwo: 0,\n        trendThree: 0,\n        trendFour: 0,\n        trendFive: 0,\n        trendSix: 0,\n        trendSeven: 0,\n        yestPos: 0,\n        yestNeg: 0,\n        yestDeaths: 0,\n        yestHosp: 0,\n        yestTotalDeaths: 0,\n        loadingCount: 0,\n        newTests: 0,\n        yestTests: 0,\n        selectedCounty: \"WI\",\n        updated: 0,\n\n    }\n\n    getData() {\n        // get current US values\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/current.json').then(res => {\n            console.log(res.data);\n            this.setState({\n                newPos: res.data.positiveIncrease,\n                newNeg: res.data.negativeIncrease,\n                newDeaths: res.data.deathIncrease,\n                totalDeaths: res.data.death,\n                hospitalized: res.data.hospitalizedCurrently,\n                newHosp: res.data.hospitalizedIncrease,\n                population: res.data.total,\n                dataGrade: res.data.dataQualityGrade,\n                newTests: res.data.totalTestResultsIncrease,\n                lastUpdated: res.data.lastUpdateEt\n            })\n        });\n\n        // last api calls\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayTwo + '.json').then(res => {\n            this.setState({\n                trendTwo: res.data.positiveIncrease,\n                yestPos: res.data.positiveIncrease,\n                yestNeg: res.data.negativeIncrease,\n                yestDeaths: res.data.deathIncrease,\n                yestHosp: res.data.hospitalizedIncrease,\n                yestTotalDeaths: res.data.death\n            });\n        })\n            .catch((error) => {\n                alert(\"ERROR: Looks like this state has issues reporting their data, please try again later.\");\n            });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayThree + '.json').then(res => {\n            this.setState({\n                trendThree: res.data.positiveIncrease,\n                yestTests: res.data.totalTestResultsIncrease\n            });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayFour + '.json').then(res => {\n            this.setState({ trendFour: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayFive + '.json').then(res => {\n            this.setState({ trendFive: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + daySix + '.json').then(res => {\n            this.setState({ trendSix: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + daySeven + '.json').then(res => {\n            this.setState({ trendSeven: res.data.positiveIncrease });\n        });\n        this.setState({ updated: 1 });\n    }\n\n    componentDidUpdate() {\n        if (this.state.updated === 0) {\n            this.getData();\n            this.setState({ updated: 1 });\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    onSelectHandler = (eventKey, event) => {\n        let temp = event.target.innerHTML;\n        this.setState({ selectedCounty: temp });\n        this.setState({ updated: 0 });\n    }\n\n    render() {\n\n        /**\n        * Calculates the percentage increase/decrease for stat cards\n        * @param {*} today \n        * @param {*} yesterday \n        */\n        function percentage(today, yesterday) {\n            let temp = Math.round((today / yesterday) * 100);\n            if (temp > 100) {\n                temp = 100 - temp;\n            } else {\n                temp = temp - 100;\n            }\n            return temp;\n        }\n\n        return (\n            <>\n                <NavHeader />\n\n                <Alert type=\"primary\" isDismissible>\n                    <Header.H4>READ: Data Inconsistencies</Header.H4>\n                    <p>\n                        Due to how states report their data, there are many inconsistencies in regard to\n                        some states not reporting the same categories of data. Unfortunately, there is no\n                        way tell if states don't report the data listed below. Some states will report a\n                        category of data one week and deprecate it the next.\n                    </p>\n                </Alert>\n\n                <Page.Content title=\"Statewide Data\">\n                    <p>Select a State:</p>\n                    <DropdownButton\n                        title={this.state.selectedCounty}\n                        id=\"dropdown-menu-align-right\"\n                        className=\"dropdown\">\n                        {states.map((data, index) => {\n                            return (\n                                <Dropdown.Item\n                                    eventKey={index.toString()}\n                                    onSelect={this.onSelectHandler}\n                                    as=\"button\"\n                                >\n                                    {data}\n                                </Dropdown.Item>\n                            )\n                        })}\n                    </DropdownButton>\n                    <Grid.Row cards={true}>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newPos, this.state.yestPos)}\n                                total={this.state.newPos.toLocaleString()}\n                                label=\"New Positive Cases\" />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newNeg, this.state.yestNeg)}\n                                total={this.state.newNeg.toLocaleString()}\n                                label=\"New Negative Cases\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newDeaths, this.state.yestDeaths)}\n                                total={this.state.newDeaths.toLocaleString()}\n                                label=\"New Daily Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.totalDeaths, this.state.yestTotalDeaths)}\n                                total={this.state.totalDeaths.toLocaleString()}\n                                label=\"Total Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newHosp, this.state.yestHosp)}\n                                total={this.state.hospitalized.toLocaleString()}\n                                label=\"Hospitalized\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newTests, this.state.yestTests)}\n                                total={this.state.newTests.toLocaleString()}\n                                label=\"New Tests Taken\"\n                            />\n                        </Grid.Col>\n\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Newly Hospitalized\"\n                                content={this.state.newHosp.toLocaleString()}\n                                progressWidth={100}\n                                progressColor=\"blue\"\n\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Last Updated\"\n                                content={this.state.lastUpdated.toLocaleString()}\n                                progressColor=\"purple\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Data Quality Grade\"\n                                content={this.state.dataGrade}\n                                progressColor=\"green\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n                        <Grid.Col lg={12}>\n                            <Card>\n                                <Card.Header>\n                                    <Card.Title>Case Trend</Card.Title>\n                                </Card.Header>\n                                <C3Chart\n                                    style={{ height: \"10rem\" }}\n                                    data={{\n                                        columns: [\n                                            [\n                                                \"cases\",\n                                                this.state.trendSeven,\n                                                this.state.trendSix,\n                                                this.state.trendFive,\n                                                this.state.trendFour,\n                                                this.state.trendThree,\n                                                this.state.trendTwo,\n                                                this.state.newPos,\n                                            ],\n                                        ],\n                                        type: \"area\",\n                                        groups: [[\"cases\"]],\n                                        colors: {\n                                            cases: colors[\"blue-dark\"],\n                                        },\n                                        names: {\n                                            cases: \"Cases\",\n                                        },\n                                    }}\n                                    axis={{\n                                        y: {\n                                            padding: {\n                                                bottom: 0,\n                                            },\n                                            show: false,\n                                            tick: {\n                                                outer: false,\n                                            },\n                                        },\n                                        x: {\n                                            padding: {\n                                                left: 0,\n                                                right: 0,\n                                            },\n                                            show: false,\n                                        },\n                                    }}\n                                    legend={{\n                                        show: true,\n                                        position: \"bottom\",\n                                        padding: 0,\n                                    }}\n                                    tooltip={{\n                                        format: {\n                                            title: function (x) {\n                                                return \"\";\n                                            },\n                                        },\n                                    }}\n                                    padding={{\n                                        bottom: 0,\n                                        left: 0,\n                                        right: 0,\n                                    }}\n                                    point={{\n                                        show: true,\n                                    }}\n                                />\n                                <Table\n                                    cards={true}\n                                    striped={true}\n                                    responsive={true}\n                                    className=\"table-vcenter\"\n                                >\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.ColHeader>Date</Table.ColHeader>\n                                            <Table.ColHeader>New Cases</Table.ColHeader>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.newPos.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(1, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendTwo.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(2, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendThree.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(3, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFour.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(4, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFive.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(5, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSix.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(6, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSeven.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Card>\n                        </Grid.Col>\n                    </Grid.Row>\n                </Page.Content>\n                <NavFooter />\n            </>\n        );\n    }\n}\n\nexport default StatePage;","import * as React from 'react';\nimport NavHeader from './NavHeader';\nimport NavFooter from './NavFooter';\nimport { Page } from 'tabler-react';\nimport {\n    Accordion,\n    Card\n} from 'react-bootstrap';\n\n\nclass AboutPage extends React.Component {\n    render() {\n        return (\n            <>\n                <NavHeader />\n                <Page.Content title=\"About CovidStats\">\n                    <Accordion defaultActiveKey=\"0\">\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                Data Source\n                        </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body>\n                                    All data is acquired from the <a href=\"https://covidtracking.com/data/api\"\n                                        target=\"_blank\" rel=\"noreferrer\">\n                                        The COVID Tracking Project</a>. The full dataset is updated by them between 5:30pm\n                                and 7pm Eastern time. This data is not scraped and is gathered and double-checked by\n                                humans. Note, the COVID Tracking Project relies on each state to report valid data each and\n                                every day. There is no consistent reporting format amongst states, so the data collected\n                                for this project is the most recent data available to the public.</Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                                Data Inconsistencies\n                        </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    Due to how states collect their data, some states have fewer categories than others.\n                                    For example, states like Wisconsin and California collect data on the amount of people who have\n                                    \"recovered\" from the virus. Many other states don't collect this data or don't make it available to\n                                    the public. I did my best to make sure I gathered data from categories that every state consistently\n                                    reports, but I ultimately have no way of knowing if states stop reporting the categories listed on\n                                    this site.\n                            </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                                Racial Data Dashboard\n                        </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"2\">\n                                <Card.Body>\n                                    While this information isn't available from The COVID Tracking Project's API,\n                                    they have a detailed dataset on the latest race and ethnicity data from every\n                                    state/territory that reports it. You can find this data\n                                <a href=\"https://covidtracking.com/race/dashboard\" target=\"_blank\"\n                                        rel=\"noreferrer\"> here.</a>\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"3\">\n                                Data Quality Grade\n                        </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"3\">\n                                <Card.Body>\n                                    The COVID Tracking Project have created a category grading each state on how complete\n                                    their data is. Does the state report their statistics in reliable and consistent manner?\n                                    Are they reporting on COVID's effects on patients and the healthcare system?\n                                    Do they categorize COVID's effect based on detailed demographics? How transparent are they\n                                    with their reporting to the public? There are many more factors considered here, but the\n                                    goal is to show which states are doing a good job reporting.\n                            </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                        <Card>\n                            <Accordion.Toggle as={Card.Header} eventKey=\"4\">\n                                Check out the Project\n                        </Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"4\">\n                                <Card.Body>\n                                    If you're interested in how I made this website, please check out the <a href=\"https://github.com/max-richter/covidstats\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\">GitHub repository</a>. Here you will find the code I wrote to bring this project to life.\n                                        Have a feature suggestion? Please open up an \"Issue\" and I will try my best to implement it if the feature\n                                        fits the project's scope.\n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                </Page.Content>\n                <NavFooter />\n            </>\n        );\n    }\n}\n\nexport default AboutPage;","import * as React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Error400 from \"../error_pages/Error400\";\nimport Error401 from \"../error_pages/Error401\";\nimport Error403 from \"../error_pages/Error403\";\nimport Error404 from \"../error_pages/Error404\";\nimport Error500 from \"../error_pages/Error500\";\nimport HomePage from './HomePage';\nimport StatePage from './StatePage';\nimport AboutPage from './AboutPage';\n\n\nclass PageRouter extends React.Component {\n    render() {\n        return (\n            <>\n                <Router basename=\"/covidstats\">\n                    <Switch>\n                        <Route exact path=\"/\" component={HomePage} />\n                        <Route exact path=\"/state\" component={StatePage} />\n                        <Route exact path=\"/about\" component={AboutPage} />\n                        <Route exact path=\"/400\" component={Error400} />\n                        <Route exact path=\"/401\" component={Error401} />\n                        <Route exact path=\"/403\" component={Error403} />\n                        <Route exact path=\"/404\" component={Error404} />\n                        <Route exact path=\"/500\" component={Error500} />\n                    </Switch>\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default PageRouter;","import './App.css';\nimport \"tabler-react/dist/Tabler.css\";\nimport PageRouter from './dashboard/PageRouter';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageRouter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}