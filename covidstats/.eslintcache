[{"/Users/max/Desktop/covidstats/covidstats/src/index.js":"1","/Users/max/Desktop/covidstats/covidstats/src/App.js":"2","/Users/max/Desktop/covidstats/covidstats/src/reportWebVitals.js":"3","/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error400.jsx":"4","/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error401.jsx":"5","/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error403.jsx":"6","/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error404.jsx":"7","/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error500.jsx":"8","/Users/max/Desktop/covidstats/covidstats/src/dashboard/StatePage.jsx":"9","/Users/max/Desktop/covidstats/covidstats/src/dashboard/AboutPage.jsx":"10","/Users/max/Desktop/covidstats/covidstats/src/dashboard/HomePage.jsx":"11","/Users/max/Desktop/covidstats/covidstats/src/dashboard/NavHeader.jsx":"12","/Users/max/Desktop/covidstats/covidstats/src/dashboard/NavFooter.jsx":"13","/Users/max/Desktop/covidstats/covidstats/src/dashboard/PageRouter.jsx":"14"},{"size":501,"mtime":1609299347874,"results":"15","hashOfConfig":"16"},{"size":309,"mtime":1611003126698,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1609280618300,"results":"18","hashOfConfig":"16"},{"size":225,"mtime":1609283116319,"results":"19","hashOfConfig":"16"},{"size":225,"mtime":1609282119396,"results":"20","hashOfConfig":"16"},{"size":225,"mtime":1609282112487,"results":"21","hashOfConfig":"16"},{"size":225,"mtime":1609282094874,"results":"22","hashOfConfig":"16"},{"size":225,"mtime":1609282102722,"results":"23","hashOfConfig":"16"},{"size":17402,"mtime":1611014967430,"results":"24","hashOfConfig":"16"},{"size":291,"mtime":1611003081939,"results":"25","hashOfConfig":"16"},{"size":20275,"mtime":1611006377436,"results":"26","hashOfConfig":"16"},{"size":1681,"mtime":1611016491457,"results":"27","hashOfConfig":"16"},{"size":2092,"mtime":1610989452170,"results":"28","hashOfConfig":"16"},{"size":1308,"mtime":1611015383870,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ohc8om",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/max/Desktop/covidstats/covidstats/src/index.js",[],["61","62"],"/Users/max/Desktop/covidstats/covidstats/src/App.js",["63","64","65","66"],"import './App.css';\nimport \"tabler-react/dist/Tabler.css\";\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport PageRouter from './dashboard/PageRouter';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageRouter />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/max/Desktop/covidstats/covidstats/src/reportWebVitals.js",[],"/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error400.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error401.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error403.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error404.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/error_pages/Error500.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/dashboard/StatePage.jsx",["67","68","69"],"import * as React from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport NavHeader from './NavHeader';\nimport NavFooter from './NavFooter';\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport C3Chart from 'react-c3js';\nimport stateData from './states.json';\nimport {\n    Page,\n    Grid,\n    StatsCard,\n    Card,\n    colors,\n    Table,\n    ProgressCard,\n    Alert,\n    Header,\n    Button\n} from 'tabler-react';\nimport '/Users/max/Desktop/covidstats/covidstats/src/c3.css';\nimport BootButton from 'react-bootstrap/esm/Button';\n\nconst domain = 'https://api.covidtracking.com';\nconst states = stateData;\n\n\nclass StatePage extends React.Component {\n\n    state = {\n        newPos: 0,\n        newNeg: 0,\n        newDeaths: 0,\n        totalDeaths: 0,\n        hospitalized: 0,\n        newHosp: 0,\n        lastUpdated: '',\n        dataGrade: '',\n        trendTwo: 0,\n        trendThree: 0,\n        trendFour: 0,\n        trendFive: 0,\n        trendSix: 0,\n        trendSeven: 0,\n        yestPos: 0,\n        yestNeg: 0,\n        yestDeaths: 0,\n        yestHosp: 0,\n        yestTotalDeaths: 0,\n        loadingCount: 0,\n        newTests: 0,\n        yestTests: 0,\n        selectedCounty: \"WI\",\n        updated: 0,\n\n    }\n\n    getData() {\n        // get current US values\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/current.json').then(res => {\n            console.log(res.data);\n            this.setState({\n                newPos: res.data.positiveIncrease,\n                newNeg: res.data.negativeIncrease,\n                newDeaths: res.data.deathIncrease,\n                totalDeaths: res.data.death,\n                hospitalized: res.data.hospitalizedCurrently,\n                newHosp: res.data.hospitalizedIncrease,\n                population: res.data.total,\n                dataGrade: res.data.dataQualityGrade,\n                newTests: res.data.totalTestResultsIncrease,\n                lastUpdated: res.data.lastUpdateEt\n            })\n        });\n\n        // get historic values\n        let dayTwo = moment().subtract(3, 'days').format(\"YYYYMMDD\").toLocaleString();\n        let dayThree = moment().subtract(4, 'days').format(\"YYYYMMDD\").toLocaleString();\n        let dayFour = moment().subtract(5, 'days').format(\"YYYYMMDD\").toLocaleString();\n        let dayFive = moment().subtract(6, 'days').format(\"YYYYMMDD\").toLocaleString();\n        let daySix = moment().subtract(7, 'days').format(\"YYYYMMDD\").toLocaleString();\n        let daySeven = moment().subtract(8, 'days').format(\"YYYYMMDD\").toLocaleString();\n\n        // last api calls\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayTwo + '.json').then(res => {\n            this.setState({\n                trendTwo: res.data.positiveIncrease,\n                yestPos: res.data.positiveIncrease,\n                yestNeg: res.data.negativeIncrease,\n                yestDeaths: res.data.deathIncrease,\n                yestHosp: res.data.hospitalizedIncrease,\n                yestTotalDeaths: res.data.death\n            });\n        })\n        .catch((error) => {\n            alert(\"Something went wrong!\");\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayThree + '.json').then(res => {\n            this.setState({\n                trendThree: res.data.positiveIncrease,\n                yestTests: res.data.totalTestResultsIncrease\n            });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayFour + '.json').then(res => {\n            this.setState({ trendFour: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + dayFive + '.json').then(res => {\n            this.setState({ trendFive: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + daySix + '.json').then(res => {\n            this.setState({ trendSix: res.data.positiveIncrease });\n        });\n        axios.get(domain + '/v1/states/' + this.state.selectedCounty + '/' + daySeven + '.json').then(res => {\n            this.setState({ trendSeven: res.data.positiveIncrease });\n        });\n        this.setState({updated: 1});\n    }\n\n    componentDidUpdate() {\n        if (this.state.updated == 0) {\n            this.getData();\n            this.setState({updated: 1});\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    onSelectHandler = (eventKey, event) => {\n        let temp = event.target.innerHTML;\n        this.setState({ selectedCounty: temp });\n        this.setState({updated: 0});\n    }\n\n    render() {\n\n        /**\n        * Calculates the percentage increase/decrease for stat cards\n        * @param {*} today \n        * @param {*} yesterday \n        */\n        function percentage(today, yesterday) {\n            let temp = Math.round((today / yesterday) * 100);\n            if (temp > 100) {\n                temp = 100 - temp;\n            } else {\n                temp = temp - 100;\n            }\n            return temp;\n        }\n\n        return (\n            <>\n                <NavHeader />\n\n                <Alert type=\"primary\" isDismissible>\n                    <Header.H4>READ: Data Inconsistencies</Header.H4>\n                    <p>\n                        Due to how states report their data, there are many inconsistencies in regard to\n                        some states not reporting the same categories of data. Unfortunately, there is no\n                        way tell if states don't report the data listed below. Some states will report a\n                        category of data one week and deprecate it the next.\n                    </p>\n                </Alert>\n\n                <Page.Content title=\"Statewide Data\">\n                    <p>Select a State:</p>\n                    <DropdownButton\n                        title={this.state.selectedCounty}\n                        id=\"dropdown-menu-align-right\"\n                        className=\"dropdown\">\n                        {states.map((data, index) => {\n                            return (\n                                <Dropdown.Item\n                                    eventKey={index.toString()}\n                                    onSelect={this.onSelectHandler}\n                                    as=\"button\"\n                                >\n                                    {data}\n                                </Dropdown.Item>\n                            )\n                        })}\n                    </DropdownButton>\n                    <Grid.Row cards={true}>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newPos, this.state.yestPos)}\n                                total={this.state.newPos.toLocaleString()}\n                                label=\"New Positive Cases\" />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newNeg, this.state.yestNeg)}\n                                total={this.state.newNeg.toLocaleString()}\n                                label=\"New Negative Cases\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newDeaths, this.state.yestDeaths)}\n                                total={this.state.newDeaths.toLocaleString()}\n                                label=\"New Daily Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.totalDeaths, this.state.yestTotalDeaths)}\n                                total={this.state.totalDeaths.toLocaleString()}\n                                label=\"Total Deaths\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newHosp, this.state.yestHosp)}\n                                total={this.state.hospitalized.toLocaleString()}\n                                label=\"Hospitalized\"\n                            />\n                        </Grid.Col>\n                        <Grid.Col width={6} sm={4} lg={2}>\n                            <StatsCard\n                                layout={1}\n                                movement={percentage(this.state.newTests, this.state.yestTests)}\n                                total={this.state.newTests.toLocaleString()}\n                                label=\"New Tests Taken\"\n                            />\n                        </Grid.Col>\n\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Newly Hospitalized\"\n                                content={this.state.newHosp.toLocaleString()}\n                                progressWidth={100}\n                                progressColor=\"blue\"\n\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Last Updated\"\n                                content={this.state.lastUpdated.toLocaleString()}\n                                progressColor=\"purple\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n                        <Grid.Col sm={4}>\n                            <ProgressCard\n                                header=\"Data Quality Grade\"\n                                content={this.state.dataGrade}\n                                progressColor=\"green\"\n                                progressWidth={100}\n                            />\n                        </Grid.Col>\n                        <Grid.Col lg={12}>\n                            <Card>\n                                <Card.Header>\n                                    <Card.Title>Case Trend</Card.Title>\n                                </Card.Header>\n                                <C3Chart\n                                    style={{ height: \"10rem\" }}\n                                    data={{\n                                        columns: [\n                                            [\n                                                \"cases\",\n                                                this.state.newPos,\n                                                this.state.trendTwo,\n                                                this.state.trendThree,\n                                                this.state.trendFour,\n                                                this.state.trendFive,\n                                                this.state.trendSix,\n                                                this.state.trendSeven,\n                                            ],\n                                        ],\n                                        type: \"area\",\n                                        groups: [[\"cases\"]],\n                                        colors: {\n                                            cases: colors[\"blue-dark\"],\n                                        },\n                                        names: {\n                                            cases: \"Cases\",\n                                        },\n                                    }}\n                                    axis={{\n                                        y: {\n                                            padding: {\n                                                bottom: 0,\n                                            },\n                                            show: false,\n                                            tick: {\n                                                outer: false,\n                                            },\n                                        },\n                                        x: {\n                                            padding: {\n                                                left: 0,\n                                                right: 0,\n                                            },\n                                            show: false,\n                                        },\n                                    }}\n                                    legend={{\n                                        show: true,\n                                        position: \"bottom\",\n                                        padding: 0,\n                                    }}\n                                    tooltip={{\n                                        format: {\n                                            title: function (x) {\n                                                return \"\";\n                                            },\n                                        },\n                                    }}\n                                    padding={{\n                                        bottom: 0,\n                                        left: 0,\n                                        right: 0,\n                                    }}\n                                    point={{\n                                        show: true,\n                                    }}\n                                />\n                                <Table\n                                    cards={true}\n                                    striped={true}\n                                    responsive={true}\n                                    className=\"table-vcenter\"\n                                >\n                                    <Table.Header>\n                                        <Table.Row>\n                                            <Table.ColHeader>Date</Table.ColHeader>\n                                            <Table.ColHeader>New Cases</Table.ColHeader>\n                                        </Table.Row>\n                                    </Table.Header>\n                                    <Table.Body>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.newPos.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(1, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendTwo.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(2, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendThree.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(3, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFour.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(4, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendFive.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(5, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSix.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                        <Table.Row>\n                                            <Table.Col className=\"text-nowrap\">{moment().subtract(6, 'days').format('LL')}</Table.Col>\n                                            <Table.Col>{this.state.trendSeven.toLocaleString()}</Table.Col>\n                                        </Table.Row>\n                                    </Table.Body>\n                                </Table>\n                            </Card>\n                        </Grid.Col>\n                    </Grid.Row>\n                </Page.Content>\n                <NavFooter />\n            </>\n        );\n    }\n}\n\nexport default StatePage;","/Users/max/Desktop/covidstats/covidstats/src/dashboard/AboutPage.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/dashboard/HomePage.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/dashboard/NavHeader.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/dashboard/NavFooter.jsx",[],"/Users/max/Desktop/covidstats/covidstats/src/dashboard/PageRouter.jsx",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":3,"column":27,"nodeType":"76","messageId":"77","endLine":3,"endColumn":33},{"ruleId":"74","severity":1,"message":"78","line":3,"column":35,"nodeType":"76","messageId":"77","endLine":3,"endColumn":43},{"ruleId":"74","severity":1,"message":"79","line":3,"column":45,"nodeType":"76","messageId":"77","endLine":3,"endColumn":50},{"ruleId":"74","severity":1,"message":"80","line":3,"column":52,"nodeType":"76","messageId":"77","endLine":3,"endColumn":58},{"ruleId":"74","severity":1,"message":"81","line":20,"column":5,"nodeType":"76","messageId":"77","endLine":20,"endColumn":11},{"ruleId":"74","severity":1,"message":"82","line":23,"column":8,"nodeType":"76","messageId":"77","endLine":23,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":121,"column":32,"nodeType":"85","messageId":"86","endLine":121,"endColumn":34},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Button' is defined but never used.","'BootButton' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]